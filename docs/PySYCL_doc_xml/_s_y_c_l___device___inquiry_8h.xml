<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_s_y_c_l___device___inquiry_8h" kind="file" language="C++">
    <compoundname>SYCL_Device_Inquiry.h</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">CL/sycl.hpp</includes>
    <includedby refid="_device___py_bind___module_8cpp" local="yes">Device/Device_PyBind_Module.cpp</includedby>
    <includedby refid="_vector___object_8h" local="yes">Vector/Vector_Object.h</includedby>
    <includedby refid="_vector___operations_8h" local="yes">Vector/Vector_Operations.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>CL/sycl.hpp</label>
      </node>
      <node id="1">
        <label>Device/SYCL_Device_Inquiry.h</label>
        <link refid="_s_y_c_l___device___inquiry_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>Vector/Vector_Operations.h</label>
        <link refid="_vector___operations_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Vector/Vector_Object.h</label>
        <link refid="_vector___object_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>Device/SYCL_Device_Inquiry.h</label>
        <link refid="_s_y_c_l___device___inquiry_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Vector/Vector_PyBind_Module.cpp</label>
        <link refid="_vector___py_bind___module_8cpp"/>
      </node>
      <node id="2">
        <label>Device/Device_PyBind_Module.cpp</label>
        <link refid="_device___py_bind___module_8cpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacepysycl">pysycl</innernamespace>
    <briefdescription>
<para>Collecting SYCL device availability and information. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>SYCL_DEVICE_INQUIRY_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYCL_DEVICE_INQUIRY_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">///////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>PySYCL<sp/>software<sp/>for<sp/>SYCL<sp/>development<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Python.<sp/><sp/>It<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>licence.<sp/><sp/>A<sp/>copy<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>license,<sp/>in<sp/>a<sp/>file<sp/>named<sp/>LICENSE.md,<sp/>should<sp/>have<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>file.<sp/><sp/>A<sp/>copy<sp/>of<sp/>this<sp/>license<sp/>is<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>currently<sp/>available<sp/>at<sp/>&quot;http://opensource.org/licenses/MIT&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>explicitly<sp/>stated,<sp/>all<sp/>contributions<sp/>intentionally<sp/>submitted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>this<sp/>project<sp/>shall<sp/>also<sp/>be<sp/>under<sp/>the<sp/>terms<sp/>and<sp/>conditions<sp/>of<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>license,<sp/>without<sp/>any<sp/>additional<sp/>terms<sp/>or<sp/>conditions.</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">///////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment">///////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="17"><highlight class="comment">///<sp/>\file</highlight></codeline>
<codeline lineno="18"><highlight class="comment">///<sp/>\brief<sp/>Collecting<sp/>SYCL<sp/>device<sp/>availability<sp/>and<sp/>information.</highlight></codeline>
<codeline lineno="19"><highlight class="comment">///////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="20"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;CL/sycl.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">///////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="25"><highlight class="comment">///<sp/>\addtogroup<sp/>Device</highlight></codeline>
<codeline lineno="26"><highlight class="comment">///<sp/>@{</highlight></codeline>
<codeline lineno="27"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacepysycl" kindref="compound">pysycl</ref>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="30"><highlight class="comment">///////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="31"><highlight class="comment">///<sp/>\brief<sp/>Function<sp/>that<sp/>returns<sp/>a<sp/>list<sp/>of<sp/>available<sp/>SYCL<sp/>platforms.</highlight></codeline>
<codeline lineno="32" refid="namespacepysycl_1a87f73272c1b9023c7b0cd574d527ffd3" refkind="member"><highlight class="comment"></highlight><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="namespacepysycl_1a87f73272c1b9023c7b0cd574d527ffd3" kindref="member">platform_list</ref>(){</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>platform_names;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>platforms<sp/>=<sp/>sycl::platform::get_platforms();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;p<sp/>:<sp/>platforms){</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>platform_names.push_back(p.get_info&lt;sycl::info::platform::name&gt;()<sp/>+</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>(<sp/>platform<sp/>index<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>platform_names;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment">///////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="48"><highlight class="comment">///<sp/>\brief<sp/>Function<sp/>that<sp/>returns<sp/>a<sp/>list<sp/>of<sp/>available<sp/>SYCL<sp/>devices.</highlight></codeline>
<codeline lineno="49" refid="namespacepysycl_1aa743f37417afb11704024adba84a3493" refkind="member"><highlight class="comment"></highlight><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="namespacepysycl_1aa743f37417afb11704024adba84a3493" kindref="member">device_list</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>platform_index){</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>device_names;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>platforms<sp/>=<sp/>sycl::platform::get_platforms();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>selected_platform<sp/>=<sp/>platforms[platform_index];</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>devices<sp/>=<sp/>selected_platform.get_devices();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;d<sp/>:<sp/>devices){</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>device_names.push_back(d.get_info&lt;sycl::info::device::name&gt;()<sp/>+</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>(<sp/>device<sp/>index<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device_names;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment">///////////////////////////////////////////////////////////////////////</highlight></codeline>
<codeline lineno="67"><highlight class="comment">///<sp/>\brief<sp/>Function<sp/>that<sp/>returns<sp/>a<sp/>sycl<sp/>device<sp/>queue.</highlight></codeline>
<codeline lineno="68" refid="namespacepysycl_1a00b26210f29a913df10ccb3b63c13fb5" refkind="member"><highlight class="comment"></highlight><highlight class="normal">sycl::queue<sp/><ref refid="namespacepysycl_1a00b26210f29a913df10ccb3b63c13fb5" kindref="member">get_queue</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>platform_index<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_index<sp/>=<sp/>0){</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>platforms<sp/>=<sp/>sycl::platform::get_platforms();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>selected_platform<sp/>=<sp/>platforms[platform_index];</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>devices<sp/>=<sp/>selected_platform.get_devices();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>selected_device<sp/>=<sp/>devices[device_index];</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>sycl::queue<sp/>q(selected_device);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>pysycl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="79"><highlight class="comment">///<sp/>@}</highlight></codeline>
<codeline lineno="80"><highlight class="comment"></highlight><highlight class="comment">//<sp/>end<sp/>&quot;Device&quot;<sp/>doxygen<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>#ifndef<sp/>SYCL_DEVICE_INQUIRY_H</highlight></codeline>
    </programlisting>
    <location file="Device/SYCL_Device_Inquiry.h"/>
  </compounddef>
</doxygen>
